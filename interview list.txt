‚úÖ Core Java & Syntax (Q1‚ÄìQ15)
What is the difference between == and .equals()?

Why are Strings immutable in Java?

How does Java manage memory (heap vs stack)?

What is autoboxing and unboxing?

What are wrapper classes in Java?

What is the difference between StringBuilder and StringBuffer?

How is final used in Java? What are its implications?

What is the default value of primitive data types?

What does the static keyword do?

How does the transient keyword work?

Can you override a private or static method?

What is method overloading vs method overriding?

Explain this() and super() in constructors.

Can we declare a constructor as final?

What is the var keyword in Java?

‚úÖ OOP & Design Principles (Q16‚ÄìQ30)
Explain the 4 pillars of OOP.

What is encapsulation and why is it important?

How do you achieve polymorphism in Java?

What‚Äôs the difference between interface and abstract class?

Can a class extend multiple classes or implement multiple interfaces?

What is the Liskov Substitution Principle?

What is the Open-Closed Principle?

How is composition different from inheritance?

How do you design a Singleton class?

Can we make an abstract class final?

What is the diamond problem? How is it resolved in Java?

How does Java support multiple inheritance?

What is method hiding?

How do you implement dependency injection in Java?

Give an example of the Factory design pattern.

‚úÖ Collections Framework (Q31‚ÄìQ55)
What are the differences between ArrayList and LinkedList?

How does HashMap work internally?

Why is HashMap not thread-safe?

What is ConcurrentHashMap? How is it different from Hashtable?

What is the load factor in HashMap?

Explain fail-fast vs fail-safe iterators.

How does a TreeMap maintain order?

What‚Äôs the difference between HashSet and TreeSet?

When to use Queue, Deque, and Stack?

How are PriorityQueue elements ordered?

What‚Äôs the use of EnumMap?

How does LinkedHashMap maintain insertion order?

What is the difference between Iterator and ListIterator?

What are the best practices for overriding equals() and hashCode()?

How do you sort a collection using custom comparators?

What is the difference between Comparable and Comparator?

How do you remove duplicates from a list?

Can a Map have null keys or null values?

How do you safely iterate and modify a collection?

What is the time complexity of common collection operations?

How to make a collection read-only?

What is the difference between Collections.synchronizedList() and CopyOnWriteArrayList?

How do you find duplicates in a list?

How would you reverse a LinkedList?

What is the purpose of EnumSet?

‚úÖ Multithreading & Concurrency (Q56‚ÄìQ75)
What is the difference between Thread and Runnable?

What are daemon threads?

What is the lifecycle of a thread?

What is the difference between start() and run()?

How does synchronized keyword work?

What is a deadlock? How do you prevent it?

What is volatile keyword and when to use it?

What is the Java memory model?

How does wait(), notify(), notifyAll() work?

How does ReentrantLock differ from synchronized?

What is ThreadLocal?

What is an ExecutorService?

What is the difference between Callable and Runnable?

What is Future and CompletableFuture?

What is a race condition?

How does CountDownLatch work?

What is CyclicBarrier?

How does Semaphore work in Java?

Explain ForkJoinPool.

What are some thread-safe collection classes?

‚úÖ Exception Handling & Best Practices (Q76‚ÄìQ85)
What is the difference between checked and unchecked exceptions?

What is the base class of all exceptions?

Can you catch multiple exceptions in one block?

What is a finally block used for?

Can we have try block without catch?

Can a finally block override return values?

How to create a custom exception?

What is the difference between throw and throws?

What happens when an exception is not caught?

How to avoid exception swallowing?

‚úÖ Memory Management & JVM (Q86‚ÄìQ95)
What are different parts of JVM memory?

How does garbage collection work?

What are strong, weak, soft, and phantom references?

How does the GC determine which objects to collect?

What are the major types of GC in Java 11/17?

What is a memory leak in Java?

How do you analyze memory usage in a Java app?

What is the permgen/metaspace?

How does intern() work for strings?

How do you profile CPU and memory performance?

‚úÖ Java 8+ Features & Misc (Q96‚ÄìQ100)
What is a lambda expression?

What are streams in Java 8? How do they work?

What is Optional and how should it be used?

How do you use method references?

What is the difference between map() and flatMap()?


‚úÖ Topic 2: Data Structures

‚ùì 100 Data Structures Interview Questions
üìÅ Arrays & Strings (Q1‚ÄìQ20)
Find the duplicate number in an array without modifying the array.

Rotate an array by k steps.

Merge two sorted arrays.

Kadane‚Äôs algorithm (Maximum Subarray).

Product of array except self.

Two Sum / Three Sum / Four Sum.

Sliding window maximum.

Longest substring without repeating characters.

Palindrome check (and longest palindromic substring).

Find missing number from 1 to n.

Set Matrix Zeroes (in-place).

Search in a rotated sorted array.

Group anagrams.

Longest common prefix.

Valid parentheses.

Trapping rain water.

Move all zeroes to the end.

Count number of islands (as a matrix problem).

Word search in matrix.

Matrix spiral traversal.

üîó Linked Lists (Q21‚ÄìQ35)
Reverse a linked list.

Detect cycle in a linked list (Floyd‚Äôs Cycle Detection).

Merge two sorted linked lists.

Remove nth node from end.

Find intersection of two linked lists.

Check if linked list is a palindrome.

Add two numbers represented by linked lists.

Flatten a multilevel linked list.

Copy list with random pointer.

Sort a linked list.

Detect and remove loop.

Find middle node.

Rotate list right.

Delete node without head pointer.

Partition linked list around a value.

ü•û Stacks & Queues (Q36‚ÄìQ50)
Implement stack using queue and vice versa.

Min stack.

Evaluate reverse Polish notation.

Next greater element.

Daily temperatures.

Balanced parentheses.

Sliding window maximum (with deque).

Implement circular queue.

Design LRU cache.

Decode string (e.g., 3[a2[c]]).

Basic calculator (I, II).

Largest rectangle in histogram.

Remove k digits to get smallest number.

Implement queue using two stacks.

Celebrity problem.

üß† Hash Tables & Sets (Q51‚ÄìQ65)
Two sum (hash map approach).

Longest consecutive sequence.

Subarray sum equals K.

Isomorphic strings.

Top K frequent elements.

Group anagrams.

Find all duplicates in array.

Minimum window substring.

Valid Sudoku.

Word pattern.

Intersection of two arrays.

Count distinct elements in every window.

Implement phone directory.

Find common elements in 3 sorted arrays.

First non-repeating character.

üå≤ Trees (Q66‚ÄìQ80)
Inorder, preorder, postorder traversals.

Level order traversal (BFS).

Validate BST.

Lowest common ancestor.

Diameter of binary tree.

Check if tree is symmetric.

Construct binary tree from inorder & preorder.

Path sum in a binary tree.

Flatten binary tree to linked list.

Vertical order traversal.

Serialize and deserialize binary tree.

Zigzag level order traversal.

BST to sorted doubly linked list.

Count number of nodes in complete binary tree.

Binary tree right side view.

üîó Tries, Heaps, Disjoint Sets (Q81‚ÄìQ90)
Implement Trie.

Word search with Trie.

Longest word in dictionary.

Top K frequent words (min-heap).

Median from data stream.

Merge K sorted lists.

K closest points to origin.

Find peak in a 2D matrix.

Union-Find (DSU) ‚Äì detect cycle in graph.

Number of connected components.

üåê Graphs (Q91‚ÄìQ100)
DFS / BFS traversal.

Clone graph.

Detect cycle in undirected graph.

Detect cycle in directed graph.

Topological sort.

Number of islands (DFS / BFS / Union Find).

Shortest path in binary matrix.

Course schedule I & II.

Alien dictionary (order of characters).

Dijkstra‚Äôs algorithm for shortest path.

üí° Java Code Example ‚Äì Min Stack
java
Copy
Edit
class MinStack {
    Stack<Integer> stack = new Stack<>();
    Stack<Integer> minStack = new Stack<>();

    public void push(int val) {
        stack.push(val);
        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
        }
    }

    public void pop() {
        if (stack.pop().equals(minStack.peek())) {
            minStack.pop();
        }
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}


‚úÖ Topic 3: Object-Oriented Design (OOD)
Essential for Amazon SDE II Interviews

‚ùì 100 OOD Interview Questions
üéì OOP Basics & Principles (Q1‚ÄìQ20)
What are the four pillars of OOP?

How does encapsulation improve code maintainability?

What is the difference between abstraction and encapsulation?

How do interfaces and abstract classes differ?

Give an example of inheritance and polymorphism in real code.

What is method overriding vs method overloading?

Why is composition often preferred over inheritance?

How does Liskov Substitution Principle impact class design?

What is tight coupling and how to avoid it?

What is cohesion and why is it important?

How do you achieve polymorphism in Java?

What are access modifiers in Java and how do they affect OOD?

What‚Äôs the role of constructors in OOP?

How to apply Open/Closed principle in a payment processor design?

How to identify responsibilities when designing a class?

What‚Äôs a use-case where inheritance led to problems?

Why is deep copying important in OOD?

What is a pure virtual function (in OOP terms)?

Give an example of applying the Interface Segregation Principle.

What is the Law of Demeter?

üõ† Design Patterns (Q21‚ÄìQ60)
Implement Singleton in Java.

When would you use a Factory pattern?

What‚Äôs the difference between Strategy and State patterns?

Use case for Observer pattern (e.g., event-driven apps).

Difference between Decorator and Adapter patterns.

How to implement Chain of Responsibility pattern?

How does a Proxy pattern work?

Real-world example of Composite pattern.

What problem does the Builder pattern solve?

Difference between Template Method and Strategy.

Design an in-memory cache (use Decorator).

Design a logging system (Observer + Singleton).

Explain MVC vs MVVM.

Use the Command pattern for a text editor (undo/redo).

Implement a thread-safe Lazy Singleton.

How to extend Factory pattern using Open/Closed Principle?

How is Flyweight pattern memory efficient?

How would you implement an Iterator pattern?

Compare Bridge vs Adapter.

How do patterns promote reuse?

When to avoid Singleton?

What is a Mediator pattern used for?

How would you design a file system (Composite)?

Observer pattern in UI frameworks ‚Äì example?

Strategy pattern for different shipping providers?

When is it better to use Abstract Factory over Factory?

Difference between Prototype and Builder pattern?

When would you use Dependency Injection?

Benefits and tradeoffs of using design patterns?

What are anti-patterns? Give examples.

Use-case for Service Locator pattern.

How would you test code that uses Factory pattern?

How to implement Retry logic using Template pattern?

How does the Visitor pattern work?

Implement Policy-based Authorization using Strategy.

What is the Singleton registry?

Explain micro-kernel pattern.

Implement facade over complex subsystem.

What is a Null Object pattern?

Difference between active object and proxy?

üèóÔ∏è System Design & Class Design (Q61‚ÄìQ100)
Design an elevator system (OOP).

Design a parking lot system (OOP).

Design a library management system.

Design a movie ticket booking system.

Design a food delivery platform (Zomato, Uber Eats).

Design a deck of cards and card game.

Design a rate limiter system.

Design a notification service (Observer).

Design a social media platform (users, posts, likes).

Design a file upload system (Strategy for compression).

Design a vending machine.

Design a text editor (Command pattern).

Design a calendar/meeting scheduler.

Design a snake and ladder game.

Design an ATM.

Design a chatbot conversation handler.

Design a browser (tabs, bookmarks, history).

Design a music streaming service (Spotify-like).

Design a rideshare platform.

Design a content moderation system.

Design a banking transaction system.

Design a notification throttler.

How do you apply SOLID to a payment gateway?

How to design API client libraries (Strategy, Adapter)?

Design a workflow engine (Chain of Responsibility).

Design a plagiarism detection system.

Design a hotel booking platform.

Design a real-time chat application.

Design a news feed (Observer + Priority Queue).

Design a file system (recursive directory tree).

Design a video processing pipeline.

Design a content delivery system (CDN).

Design a distributed logger.

How would you scale your OOD to support plugins?

How do you design for extensibility and testing?

Design a multi-tenant SaaS system.

How to apply Dependency Inversion in service architecture?

Design a secure login system.

What‚Äôs the impact of OOD on testability?

How do you refactor tightly coupled classes?

üí° Java Code Example ‚Äì Factory Pattern
java
Copy
Edit
interface Notification {
    void send();
}

class EmailNotification implements Notification {
    public void send() {
        System.out.println("Sending Email");
    }
}

class SMSNotification implements Notification {
    public void send() {
        System.out.println("Sending SMS");
    }
}

class NotificationFactory {
    public static Notification create(String type) {
        return switch (type) {
            case "EMAIL" -> new EmailNotification();
            case "SMS" -> new SMSNotification();
            default -> throw new IllegalArgumentException("Unknown type");
        };
    }
}


‚úÖ Topic 4: Distributed Computing

‚ùì 100 Distributed Systems Interview Questions
‚öôÔ∏è Concepts & Theory (Q1‚ÄìQ25)
What is the CAP theorem?

What is the difference between consistency and availability?

What is eventual consistency?

What is quorum in distributed systems?

How do you handle network partitions?

What is a distributed transaction? Why is it difficult?

What‚Äôs the difference between 2PC and Saga pattern?

Explain leader election in distributed systems.

What are some strategies for load balancing?

How does hashing help in data partitioning?

What is sharding and when do you need it?

Explain heartbeats and how failure is detected.

What is a distributed cache? How do you maintain consistency?

What is write-ahead logging?

Explain tail latency and how to reduce it.

What is backpressure?

What are idempotent operations?

Why are distributed systems hard to test?

What‚Äôs the difference between latency and throughput?

What are retries with exponential backoff?

What is the difference between synchronous and asynchronous communication?

What is data replication? When do you use active-active vs active-passive?

What is eventual vs strong consistency?

What is a consensus algorithm? (e.g., Paxos, Raft)

What is the split-brain problem?

üåê APIs, Microservices & Comms (Q26‚ÄìQ45)
Design a RESTful API for a file sharing system.

How does service discovery work in microservices?

What is gRPC and when would you prefer it over REST?

How do you secure microservices communication?

What‚Äôs the role of API gateways?

How do you implement service versioning?

How to deal with schema evolution?

What is a contract-first vs code-first API design?

What is the role of OpenAPI/Swagger?

How does circuit breaker pattern work?

What are retries, timeouts, and fallbacks in APIs?

What are sidecars in service mesh (e.g., Istio)?

What is service mesh and what problems does it solve?

How do you monitor service health?

What are golden signals for distributed systems?

How would you log and trace requests across services?

What is distributed tracing?

What is an idempotent API? Give an example.

Why is rate limiting important in public APIs?

How do you achieve global rate limiting in distributed systems?

‚ö° Messaging, Queues, and Eventing (Q46‚ÄìQ65)
What is the difference between a message queue and a pub/sub system?

When would you use Kafka vs SQS?

What is message ordering and why is it difficult?

What is at-least-once vs exactly-once delivery?

How does Kafka ensure durability?

What is Kafka‚Äôs partitioning strategy?

What happens when a Kafka consumer dies?

How would you design a retry queue?

What is dead letter queue?

How do you ensure message idempotency?

How to design an event-driven architecture?

Difference between commands and events.

What is event sourcing?

How do you handle duplicate events?

What is a log compaction in Kafka?

What is schema registry?

How does Kafka handle backpressure?

Compare RabbitMQ vs Kafka.

What is a watermark in stream processing?

How would you implement real-time analytics using Kafka?

üõ° Fault Tolerance, Caching, Storage (Q66‚ÄìQ85)
How do you design for high availability?

What‚Äôs the difference between RPO and RTO?

How does replication increase fault tolerance?

What‚Äôs the tradeoff of synchronous vs asynchronous replication?

What‚Äôs cache invalidation and how do you do it right?

How do you cache data that‚Äôs frequently updated?

What is write-through vs write-behind caching?

What are cache eviction policies? (LRU, LFU, etc.)

What are consistency models in caching?

How does CDN caching differ from server-side caching?

How would you handle stale data in cache?

When do you use a distributed lock?

How do you implement a distributed lock?

Why are sticky sessions bad in load balancing?

How does a reverse proxy help with fault tolerance?

What‚Äôs the difference between Redis and Memcached?

How to choose between SQL and NoSQL in distributed systems?

When would you use DynamoDB over RDS?

What is quorum-based replication?

What is a tombstone in distributed storage?

üèó System Design Scenarios (Q86‚ÄìQ100)
Design a URL shortener (focus on scalability & hashing).

Design a distributed rate limiter.

Design an email queue and delivery system.

Design an API gateway with logging and throttling.

Design a metrics collection system.

Design a distributed logging pipeline.

Design a real-time chat system.

Design a leaderboard with frequent updates.

Design a video streaming service.

Design a distributed file system.

Design a real-time stock ticker.

Design a messaging app like WhatsApp.

Design a newsfeed service (event-driven).

Design a globally available key-value store.

Design an order processing system with Kafka and Sagas.

üí° Architecture Example ‚Äì Async Order Processor
css
Copy
Edit
Client ‚Üí API Gateway ‚Üí Order Service
                          ‚Üì
                        Kafka
                    ‚Üô         ‚Üò
       Payment Service     Inventory Service
             ‚Üì                  ‚Üì
     Kafka (Order Completed) ‚Üí Notification Service

‚úÖ Topic 5: Operating Systems

‚ùì 100 Operating Systems Interview Questions
üß† Processes, Threads & Scheduling (Q1‚ÄìQ20)
What is the difference between a process and a thread?

How are threads managed in Java?

What is a context switch?

What are the different types of thread scheduling?

Explain preemptive vs cooperative multitasking.

What is a process control block?

What are thread pools and why are they used?

How does Java handle thread priorities?

What is a daemon thread?

How does the OS allocate CPU to threads?

Explain user mode vs kernel mode.

How are child processes created in Linux?

What are long-term, short-term, and medium-term schedulers?

What is the difference between CPU-bound and I/O-bound processes?

How is thread scheduling different on multi-core CPUs?

What is starvation in process scheduling?

What is the difference between fork and exec?

What is a race condition?

How does round-robin scheduling work?

What are zombie and orphan processes?

üîê Synchronization & Deadlocks (Q21‚ÄìQ40)
What is a critical section?

What are the conditions for deadlock?

How do semaphores work?

What is a monitor in Java?

Difference between mutex and semaphore?

What is a reentrant lock?

How does Java‚Äôs synchronized keyword work?

How can deadlock be avoided?

What is livelock?

What is priority inversion?

How does the Banker‚Äôs algorithm work?

What is spinlock? When would you use it?

What are busy-wait and blocking wait?

How do you debug a deadlock?

What‚Äôs the difference between pessimistic and optimistic locking?

How does wait() and notify() work in Java?

What is the producer-consumer problem?

What is a barrier in concurrent programming?

What are reader-writer locks?

How would you prevent race conditions?

üß† Memory Management & Virtual Memory (Q41‚ÄìQ65)
What is virtual memory?

Explain the difference between heap and stack memory.

What is paging vs segmentation?

What is demand paging?

What are page faults?

What is the TLB (Translation Lookaside Buffer)?

What is internal and external fragmentation?

How does garbage collection work in Java?

What is compaction?

What is a memory leak?

How do you analyze memory usage in a Java process?

What are memory-mapped files?

What is shared memory?

Explain swapping in and out.

What is the role of the MMU?

What is copy-on-write?

How do you measure the memory footprint of a thread?

Explain stack overflow and heap overflow.

What is segmentation fault?

How is memory managed in containers (e.g., Docker)?

üßæ File Systems, I/O & Storage (Q66‚ÄìQ80)
What is a file descriptor?

What‚Äôs the difference between buffered and unbuffered I/O?

How does the OS schedule disk I/O?

What are inodes in Linux?

Explain file locking mechanisms.

How do journaling file systems work?

What is direct memory access (DMA)?

What is memory-mapped I/O?

How do SSDs and HDDs affect performance?

What is a device driver?

What are hard links vs soft links?

How does the OS manage file permissions?

What is the difference between sequential and random access?

How is file metadata stored?

What is a mount point?

What are block devices vs character devices?

What is the role of the page cache in file reads?

What are superblocks?

What is fsync and why is it needed?

How would you build a custom file system?

üì° Inter-Process Communication & Signals (Q81‚ÄìQ100)
What are the different IPC mechanisms?

How do pipes work?

How do message queues work?

What is shared memory and when to use it?

How do sockets enable IPC?

What is a signal in Unix/Linux?

What is a signal handler?

How do you handle SIGKILL vs SIGTERM?

What are named pipes (FIFOs)?

How does RPC (remote procedure call) work?

What are lightweight processes?

How does mmap enable communication between processes?

How do you debug IPC deadlocks?

How do you broadcast a signal to all threads?

What is select/poll/epoll?

What‚Äôs the difference between blocking and non-blocking I/O?

How do you achieve zero-copy data transfer?

What is latency vs throughput in IPC?

When would you use a message bus?

How is IPC handled in containers?

üí° Java Example ‚Äì Deadlock Scenario
java
Copy
Edit
class A {
    synchronized void methodA(B b) {
        System.out.println("Thread1: Holding A and waiting for B");
        b.last();
    }

    synchronized void last() {
        System.out.println("Inside A.last()");
    }
}

class B {
    synchronized void methodB(A a) {
        System.out.println("Thread2: Holding B and waiting for A");
        a.last();
    }

    synchronized void last() {
        System.out.println("Inside B.last()");
    }
}

‚úÖ Topic 6: Algorithms

‚ùì 100 Algorithms Interview Questions
üß™ Sorting & Searching (Q1‚ÄìQ15)
Implement QuickSort and MergeSort.

Search in a rotated sorted array.

Find the first and last position of an element.

Find kth largest element in array.

Search a 2D matrix.

Implement binary search recursively and iteratively.

Find the median of two sorted arrays.

Top K frequent elements.

Missing number using XOR.

Find duplicate in O(1) space.

Sort colors (Dutch national flag).

Implement radix sort.

Find peak element.

Find majority element (Boyer-Moore).

Maximum frequency stack.

üîÅ Recursion & Backtracking (Q16‚ÄìQ30)
Generate all subsets of a set.

Generate all permutations.

N-Queens problem.

Sudoku solver.

Word search in a matrix.

Palindrome partitioning.

Restore IP addresses.

Combination sum.

Letter combinations of phone number.

Permutations with duplicates.

Generate parenthesis.

Rat in a maze.

Knight‚Äôs tour.

Word break problem.

All paths from source to target.

üìâ Divide & Conquer (Q31‚ÄìQ40)
Merge k sorted lists.

Count inversions in array.

Closest pair of points.

Maximum subarray (Kadane‚Äôs + Divide & Conquer).

Power function (fast exponentiation).

Median of two sorted arrays (log time).

Find kth smallest element in sorted matrix.

Majority element using divide and conquer.

Skyline problem.

Search in rotated array.

üß† Dynamic Programming (Q41‚ÄìQ60)
Fibonacci with memoization.

Climbing stairs.

House robber.

Longest increasing subsequence.

Edit distance.

Word break.

Longest common subsequence.

0/1 Knapsack.

Coin change.

Unique paths (with obstacles).

Partition equal subset sum.

Interleaving string.

Matrix chain multiplication.

Boolean expression evaluation.

Rod cutting problem.

Palindromic substring count.

Minimum cost to climb stairs.

Decode ways.

Jump game I & II.

Cherry pickup problem.

‚ö° Greedy Algorithms (Q61‚ÄìQ70)
Activity selection problem.

Fractional knapsack.

Jump game (greedy variant).

Minimum platforms required.

Gas station circuit.

Task scheduler.

Reorganize string.

Non-overlapping intervals.

Merge intervals.

Meeting rooms.

üåê Graph Algorithms (Q71‚ÄìQ85)
DFS and BFS traversals.

Topological sort.

Detect cycle in undirected graph.

Detect cycle in directed graph.

Number of islands.

Clone graph.

Course schedule.

Dijkstra's algorithm.

Bellman-Ford algorithm.

Prim‚Äôs and Kruskal‚Äôs MST.

Union-Find implementation.

Redundant connection.

Bipartite graph check.

Alien dictionary (topo sort).

Minimum spanning tree with edge list.

üå≤ Trees & Binary Search Trees (Q86‚ÄìQ90)
Inorder, preorder, postorder traversals.

Validate BST.

Lowest common ancestor.

Serialize and deserialize binary tree.

Diameter of binary tree.

üöÄ Sliding Window & Two Pointers (Q91‚ÄìQ95)
Longest substring without repeating characters.

Longest repeating character replacement.

Max sliding window.

Minimum window substring.

Move zeroes to end.

üî• Bit Manipulation & Math (Q96‚ÄìQ100)
Single number (XOR).

Counting bits.

Power of two / three.

GCD / LCM using Euclidean algorithm.

Fast exponentiation modulo large prime.

üí° Java Code Example ‚Äì Longest Substring Without Repeating Characters
java
Copy
Edit
public int lengthOfLongestSubstring(String s) {
    Set<Character> set = new HashSet<>();
    int left = 0, right = 0, max = 0;
    
    while (right < s.length()) {
        if (!set.contains(s.charAt(right))) {
            set.add(s.charAt(right++));
            max = Math.max(max, set.size());
        } else {
            set.remove(s.charAt(left++));
        }
    }
    
    return max;
}


‚úÖ Topic 7: Coding

‚ùì 100 Coding Practice Tasks (with Patterns)
üîß Code Structure & Readability (Q1‚ÄìQ15)
Refactor a large method into smaller ones.

Rename variables for clarity.

Convert procedural code to OOP.

Write unit tests for a sorting function.

Make a function pure (no side effects).

Break up nested conditionals.

Avoid magic numbers ‚Äî use constants.

Use logging instead of print statements.

Remove code duplication.

Add null/empty checks.

Write a builder pattern for object creation.

Implement validation logic.

Format code to improve readability.

Follow Java naming conventions.

Add meaningful comments (where needed).

üß™ Unit Testing & Edge Cases (Q16‚ÄìQ30)
Write JUnit tests for a service.

Mock a repository in a service test.

Test null, empty, and large input.

Validate function returns consistent output.

Write tests for boundary conditions.

Use parameterized tests.

Test exception cases.

Test thread-safe code.

Create integration test with in-memory DB.

Validate inputs with assertions.

Write tests for data transformation function.

Add input validation to API layer.

Write tests for recursive function.

Test performance of a function.

Add custom test annotations.

üìê Production-Grade Function Design (Q31‚ÄìQ50)
Design a clean REST endpoint.

Return appropriate HTTP status codes.

Validate request data.

Design an API that handles pagination.

Use enums instead of strings.

Avoid nulls ‚Äî use Optional.

Handle errors with meaningful messages.

Avoid catching generic exceptions.

Use defensive coding.

Write a thread-safe singleton.

Use meaningful package structure.

Write utility/helper classes.

Avoid static mutable state.

Return consistent response format.

Add retry logic.

Add timeout to external calls.

Avoid tight coupling.

Design for testability.

Follow separation of concerns.

Use dependency injection.

üßµ Clean Multithreaded Code (Q51‚ÄìQ70)
Safely increment a shared counter.

Use ExecutorService instead of raw threads.

Avoid shared mutable state.

Use Future to handle async results.

Handle thread interruptions gracefully.

Write concurrent producer-consumer logic.

Use ConcurrentHashMap.

Avoid deadlocks via lock ordering.

Use CountDownLatch to wait for threads.

Design a thread pool for parallel tasks.

Test concurrent code correctness.

Measure thread performance.

Use AtomicInteger safely.

Detect and log long-running threads.

Shutdown threads cleanly.

Use timeout in blocking operations.

Use Semaphore to limit concurrency.

Log thread context info.

Avoid creating too many threads.

Simulate high concurrency in test.

üåê Clean API + Backend Code (Q71‚ÄìQ85)
Design RESTful endpoints for a CRUD service.

Handle invalid requests (400, 422).

Add input sanitization.

Ensure idempotency in API.

Handle race conditions with transactions.

Create DTOs and map entities.

Use pagination/sorting in APIs.

Secure endpoint with token validation.

Log request/response lifecycle.

Design error response structure.

Return meaningful HTTP errors.

Validate content-type headers.

Return consistent data structure.

Add correlation IDs for tracing.

Write clean service layer abstraction.

üß† Common Function Implementations (Q86‚ÄìQ100)
Implement LRU cache.

Implement binary search.

Implement string tokenizer.

Design URL shortener backend logic.

Flatten a nested list.

Encode and decode strings.

Implement custom hash map.

Implement job scheduler.

Merge intervals cleanly.

Validate an email/phone number.

Build dependency graph.

Generate random number with range.

Encode/Decode base64.

Parse JSON manually.

Simulate retry with exponential backoff.

üí° Java Code Example ‚Äì Clean Retry Logic
java
Copy
Edit
public <T> T retry(Supplier<T> action, int retries) {
    for (int i = 0; i <= retries; i++) {
        try {
            return action.get();
        } catch (Exception e) {
            if (i == retries) throw e;
            try {
                Thread.sleep((long) Math.pow(2, i) * 100L); // exponential backoff
            } catch (InterruptedException ie) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("Retry interrupted");
            }
        }
    }
    throw new RuntimeException("Unreachable");
}


‚úÖ Topic 8: Databases
Crucial for Designing Backend Systems at Amazon


‚ùì 100 Database Interview Questions
üìò SQL Basics & Queries (Q1‚ÄìQ25)
Difference between INNER JOIN, LEFT JOIN, RIGHT JOIN.

Write a query to find second highest salary.

How does indexing work in SQL?

When do you use a HAVING clause?

Difference between WHERE and HAVING.

What is a correlated subquery?

Write a query to find duplicate rows.

How to find employees with more than 2 direct reports?

Use window functions: RANK(), ROW_NUMBER(), DENSE_RANK().

What is a common table expression (CTE)?

Difference between GROUP BY and PARTITION BY.

Write a query to pivot table data.

What is the difference between UNION and UNION ALL?

Optimize a query with LIKE '%abc%'.

Explain query execution plan (EXPLAIN).

Write a recursive SQL query.

Write SQL to delete duplicates from a table.

Use CASE WHEN in a SELECT.

What is NULL-safe comparison?

How to write UPSERT in SQL?

What are aggregate functions?

How does IN vs EXISTS differ in performance?

What is an anti-join?

What is the default isolation level in SQL?

Write a query to get department-wise top 3 salaries.

üìä Schema Design & Normalization (Q26‚ÄìQ40)
What is 1NF, 2NF, 3NF?

What is denormalization? When is it useful?

Design schema for a library system.

Design schema for an e-commerce cart.

What is a surrogate key vs natural key?

What are foreign keys and constraints?

How would you store hierarchical data?

What are pros/cons of composite keys?

When would you use indexing?

Difference between clustered and non-clustered index.

What‚Äôs a covering index?

What is a materialized view?

How do foreign keys impact performance?

What is a star schema vs snowflake schema?

What‚Äôs the cost of over-normalization?

üîß Transactions & Locking (Q41‚ÄìQ55)
What is a transaction?

What are ACID properties?

What is the difference between COMMIT and ROLLBACK?

What is the isolation level in databases?

What is a dirty read?

What is a phantom read?

How do shared and exclusive locks work?

What causes deadlocks in DB transactions?

What is optimistic vs pessimistic locking?

How to ensure transaction idempotency?

What‚Äôs the role of WAL (Write Ahead Log)?

What is MVCC (Multiversion Concurrency Control)?

When would you use SERIALIZABLE isolation?

How do databases handle rollbacks internally?

How are savepoints used in transactions?

üß† Stored Procedures & Performance (Q56‚ÄìQ70)
Write a stored procedure to compute factorial.

How do you loop in a stored procedure?

What‚Äôs the difference between procedure and function?

Use IF/ELSE inside a stored procedure.

How to call a procedure from Java?

What‚Äôs the performance cost of a stored proc vs raw query?

When would you use triggers?

How do you debug stored procedures?

What is a cursor and when should you avoid it?

Write a procedure to validate email format.

How to return multiple result sets?

Use OUT parameters in stored procedures.

Stored procedure vs prepared statement?

Best practices for writing stored procedures.

How to prevent SQL injection?

üå©Ô∏è NoSQL & DynamoDB (Q71‚ÄìQ85)
What is NoSQL and when to use it?

Compare document vs key-value vs column-family DBs.

How does DynamoDB achieve high availability?

What is eventual consistency in DynamoDB?

How is data partitioned in DynamoDB?

What is a hot partition?

How does DynamoDB handle secondary indexes?

What is a Global Secondary Index (GSI)?

When should you denormalize in NoSQL?

What is TTL in DynamoDB?

Explain partition key vs sort key.

What is DynamoDB Streams?

Use case for DynamoDB + Lambda?

How to batch write in DynamoDB?

How to optimize for read/write units?

‚öôÔ∏è Real-World Design Scenarios (Q86‚ÄìQ100)
Design a database for ride-sharing app (Uber).

Design schema for Amazon product catalog.

Design schema for user roles and permissions.

Design data store for real-time chat app.

Design a scalable logging schema.

Store versioned documents (e.g., Google Docs).

How to archive old data efficiently?

How to shard MySQL database?

How to do blue/green DB deployments?

How do you implement audit logs?

How to store multi-language content?

How to scale reads without affecting writes?

Design an analytics-friendly data warehouse.

Best practices for schema evolution.

How to migrate relational DB to NoSQL?

üí° SQL Example ‚Äì Top N per Group
sql
Copy
Edit
SELECT name, department, salary
FROM (
  SELECT name, department, salary,
         ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS rn
  FROM employees
) AS ranked
WHERE rn <= 3;


‚úÖ Topic 9: Networking Topics

‚ùì 100 Networking Interview Questions
üåê HTTP/HTTPS & Web Fundamentals (Q1‚ÄìQ20)
What happens when you type a URL in the browser?

What is the difference between HTTP and HTTPS?

What are common HTTP methods (GET, POST, PUT, DELETE)?

What are idempotent methods? Why do they matter?

What are HTTP status codes (200, 301, 404, 500)?

What‚Äôs the difference between 301 and 302?

What‚Äôs a RESTful API?

What is statelessness in HTTP?

What is the purpose of HTTP headers?

How does TLS/SSL encryption work?

What are cookies and sessions?

How do HTTP Keep-Alive and pipelining work?

What‚Äôs chunked transfer encoding?

How is caching controlled via HTTP?

What is the purpose of a User-Agent header?

What are ETag and Last-Modified headers?

What are Content-Type and Accept headers used for?

What is a MIME type?

What‚Äôs the difference between JSON and XML for APIs?

What is HTTP/2 and what advantages does it offer?

üåç DNS, IP, Ports, and Sockets (Q21‚ÄìQ40)
What is DNS and how does it work?

What is the difference between A record, CNAME, and MX record?

What is TTL in DNS?

What are public vs private IPs?

What is a port number and how is it used?

What is a socket?

How does TCP establish a connection (3-way handshake)?

What is the difference between TCP and UDP?

What are ephemeral ports?

How does DNS caching work?

What is reverse DNS lookup?

What is NAT (Network Address Translation)?

How does port forwarding work?

What is a firewall and how does it impact APIs?

What is the OSI model? Where does HTTP fit?

What is the difference between MAC address and IP address?

How does traceroute work?

What is a CDN and how does it reduce latency?

What is DNS poisoning?

What is an SRV record?

üß™ TCP/IP, Load Balancing & Performance (Q41‚ÄìQ65)
What is MTU and how does it affect performance?

How does TCP ensure reliability?

What is TCP congestion control?

What is Nagle‚Äôs algorithm?

What is latency vs bandwidth?

How does load balancing work (round robin, least connections)?

What is sticky session?

What are common Layer 7 load balancers?

How does a reverse proxy differ from a forward proxy?

What are common performance bottlenecks in a web app?

How does packet loss affect TCP vs UDP?

What is TCP slow start?

What is TLS handshake and what‚Äôs exchanged?

How do self-signed certificates work?

What is HSTS (HTTP Strict Transport Security)?

How do you scale web sockets?

How do retries impact network performance?

How can you prevent DDoS at network level?

What is connection pooling?

What is ALB vs NLB in AWS?

üîê Security, Certificates, Encryption (Q66‚ÄìQ85)
How does HTTPS protect against MITM attacks?

What is symmetric vs asymmetric encryption?

What is RSA? What is it used for?

How are SSL certificates issued and verified?

What is a root certificate?

How does DNS over HTTPS work?

What is a CSRF attack?

What is XSS and how can HTTP headers help prevent it?

What is a secure cookie?

What are CORS headers?

How do HMAC and JWT work?

How to secure APIs exposed over the internet?

How to implement OAuth 2.0 authentication?

What is client-side vs server-side certificate?

How is session hijacking prevented?

How does token expiration work?

What is HTTPS downgrade attack?

What is TLS 1.3 vs TLS 1.2?

What is a man-in-the-middle attack?

What is certificate pinning?

üß† System & Architecture Applications (Q86‚ÄìQ100)
What happens to an HTTP request inside a VPC?

How would you secure a public-facing REST API?

How does DNS failover work for high availability?

How do you detect broken connections over TCP?

How would you architect a chat server with WebSockets?

How does rate limiting work at the gateway level?

How do you support international users (geo-routing)?

How do you throttle outbound requests?

How does service discovery work in microservices?

What is a heartbeat signal and why is it needed?

How do you log HTTP request latency?

How would you measure API uptime?

How does load balancer health check work?

What is the difference between polling, long-polling, and WebSocket?

How do proxies cache content?

When would you use HTTP 304?

How do hybrid mobile apps interact with APIs?

How do you secure admin endpoints over the network?

What are the pros/cons of client-side load balancing?

How does network partition affect distributed systems?

üí° Visual Example ‚Äì TCP Handshake
arduino
Copy
Edit
Client ----------------> Server      SYN
Client <---------------- Server      SYN-ACK
Client ----------------> Server      ACK
Connection Established
